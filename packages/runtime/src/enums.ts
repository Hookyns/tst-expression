// noinspection JSUnusedGlobalSymbols

/**
 * ExpressionKind
 */
export enum ExpressionKind
{
	Unknown = 0,
	EndOfFileToken = 1,
	SingleLineCommentTrivia = 2,
	MultiLineCommentTrivia = 3,
	NewLineTrivia = 4,
	WhitespaceTrivia = 5,
	ShebangTrivia = 6,
	ConflictMarkerTrivia = 7,
	NumericLiteral = 8,
	BigIntLiteral = 9,
	StringLiteral = 10,
	JsxText = 11,
	JsxTextAllWhiteSpaces = 12,
	RegularExpressionLiteral = 13,
	NoSubstitutionTemplateLiteral = 14,
	TemplateHead = 15,
	TemplateMiddle = 16,
	TemplateTail = 17,
	OpenBraceToken = 18,
	CloseBraceToken = 19,
	OpenParenToken = 20,
	CloseParenToken = 21,
	OpenBracketToken = 22,
	CloseBracketToken = 23,
	DotToken = 24,
	DotDotDotToken = 25,
	SemicolonToken = 26,
	CommaToken = 27,
	QuestionDotToken = 28,
	LessThanToken = 29,
	LessThanSlashToken = 30,
	GreaterThanToken = 31,
	LessThanEqualsToken = 32,
	GreaterThanEqualsToken = 33,
	EqualsEqualsToken = 34,
	ExclamationEqualsToken = 35,
	EqualsEqualsEqualsToken = 36,
	ExclamationEqualsEqualsToken = 37,
	EqualsGreaterThanToken = 38,
	PlusToken = 39,
	MinusToken = 40,
	AsteriskToken = 41,
	AsteriskAsteriskToken = 42,
	SlashToken = 43,
	PercentToken = 44,
	PlusPlusToken = 45,
	MinusMinusToken = 46,
	LessThanLessThanToken = 47,
	GreaterThanGreaterThanToken = 48,
	GreaterThanGreaterThanGreaterThanToken = 49,
	AmpersandToken = 50,
	BarToken = 51,
	CaretToken = 52,
	ExclamationToken = 53,
	TildeToken = 54,
	AmpersandAmpersandToken = 55,
	BarBarToken = 56,
	QuestionToken = 57,
	ColonToken = 58,
	AtToken = 59,
	QuestionQuestionToken = 60,
	BacktickToken = 61,
	HashToken = 62,
	EqualsToken = 63,
	PlusEqualsToken = 64,
	MinusEqualsToken = 65,
	AsteriskEqualsToken = 66,
	AsteriskAsteriskEqualsToken = 67,
	SlashEqualsToken = 68,
	PercentEqualsToken = 69,
	LessThanLessThanEqualsToken = 70,
	GreaterThanGreaterThanEqualsToken = 71,
	GreaterThanGreaterThanGreaterThanEqualsToken = 72,
	AmpersandEqualsToken = 73,
	BarEqualsToken = 74,
	BarBarEqualsToken = 75,
	AmpersandAmpersandEqualsToken = 76,
	QuestionQuestionEqualsToken = 77,
	CaretEqualsToken = 78,
	Identifier = 79,
	PrivateIdentifier = 80,
	BreakKeyword = 81,
	CaseKeyword = 82,
	CatchKeyword = 83,
	ClassKeyword = 84,
	ConstKeyword = 85,
	ContinueKeyword = 86,
	DebuggerKeyword = 87,
	DefaultKeyword = 88,
	DeleteKeyword = 89,
	DoKeyword = 90,
	ElseKeyword = 91,
	EnumKeyword = 92,
	ExportKeyword = 93,
	ExtendsKeyword = 94,
	FalseKeyword = 95,
	FinallyKeyword = 96,
	ForKeyword = 97,
	FunctionKeyword = 98,
	IfKeyword = 99,
	ImportKeyword = 100,
	InKeyword = 101,
	InstanceOfKeyword = 102,
	NewKeyword = 103,
	NullKeyword = 104,
	ReturnKeyword = 105,
	SuperKeyword = 106,
	SwitchKeyword = 107,
	ThisKeyword = 108,
	ThrowKeyword = 109,
	TrueKeyword = 110,
	TryKeyword = 111,
	TypeOfKeyword = 112,
	VarKeyword = 113,
	VoidKeyword = 114,
	WhileKeyword = 115,
	WithKeyword = 116,
	ImplementsKeyword = 117,
	InterfaceKeyword = 118,
	LetKeyword = 119,
	PackageKeyword = 120,
	PrivateKeyword = 121,
	ProtectedKeyword = 122,
	PublicKeyword = 123,
	StaticKeyword = 124,
	YieldKeyword = 125,
	AbstractKeyword = 126,
	AsKeyword = 127,
	AssertsKeyword = 128,
	AnyKeyword = 129,
	AsyncKeyword = 130,
	AwaitKeyword = 131,
	BooleanKeyword = 132,
	ConstructorKeyword = 133,
	DeclareKeyword = 134,
	GetKeyword = 135,
	InferKeyword = 136,
	IntrinsicKeyword = 137,
	IsKeyword = 138,
	KeyOfKeyword = 139,
	ModuleKeyword = 140,
	NamespaceKeyword = 141,
	NeverKeyword = 142,
	ReadonlyKeyword = 143,
	RequireKeyword = 144,
	NumberKeyword = 145,
	ObjectKeyword = 146,
	SetKeyword = 147,
	StringKeyword = 148,
	SymbolKeyword = 149,
	TypeKeyword = 150,
	UndefinedKeyword = 151,
	UniqueKeyword = 152,
	UnknownKeyword = 153,
	FromKeyword = 154,
	GlobalKeyword = 155,
	BigIntKeyword = 156,
	OverrideKeyword = 157,
	OfKeyword = 158,
	QualifiedName = 159,
	ComputedPropertyName = 160,
	TypeParameter = 161,
	Parameter = 162,
	Decorator = 163,
	PropertySignature = 164,
	PropertyDeclaration = 165,
	MethodSignature = 166,
	MethodDeclaration = 167,
	ClassStaticBlockDeclaration = 168,
	Constructor = 169,
	GetAccessor = 170,
	SetAccessor = 171,
	CallSignature = 172,
	ConstructSignature = 173,
	IndexSignature = 174,
	TypePredicate = 175,
	TypeReference = 176,
	FunctionType = 177,
	ConstructorType = 178,
	TypeQuery = 179,
	TypeLiteral = 180,
	ArrayType = 181,
	TupleType = 182,
	OptionalType = 183,
	RestType = 184,
	UnionType = 185,
	IntersectionType = 186,
	ConditionalType = 187,
	InferType = 188,
	ParenthesizedType = 189,
	ThisType = 190,
	TypeOperator = 191,
	IndexedAccessType = 192,
	MappedType = 193,
	LiteralType = 194,
	NamedTupleMember = 195,
	TemplateLiteralType = 196,
	TemplateLiteralTypeSpan = 197,
	ImportType = 198,
	ObjectBindingPattern = 199,
	ArrayBindingPattern = 200,
	BindingElement = 201,
	ArrayLiteralExpression = 202,
	ObjectLiteralExpression = 203,
	PropertyAccessExpression = 204,
	ElementAccessExpression = 205,
	CallExpression = 206,
	NewExpression = 207,
	TaggedTemplateExpression = 208,
	TypeAssertionExpression = 209,
	ParenthesizedExpression = 210,
	FunctionExpression = 211,
	ArrowFunction = 212,
	DeleteExpression = 213,
	TypeOfExpression = 214,
	VoidExpression = 215,
	AwaitExpression = 216,
	PrefixUnaryExpression = 217,
	PostfixUnaryExpression = 218,
	BinaryExpression = 219,
	ConditionalExpression = 220,
	TemplateExpression = 221,
	YieldExpression = 222,
	SpreadElement = 223,
	ClassExpression = 224,
	OmittedExpression = 225,
	ExpressionWithTypeArguments = 226,
	AsExpression = 227,
	NonNullExpression = 228,
	MetaProperty = 229,
	SyntheticExpression = 230,
	TemplateSpan = 231,
	SemicolonClassElement = 232,
	Block = 233,
	EmptyStatement = 234,
	VariableStatement = 235,
	ExpressionStatement = 236,
	IfStatement = 237,
	DoStatement = 238,
	WhileStatement = 239,
	ForStatement = 240,
	ForInStatement = 241,
	ForOfStatement = 242,
	ContinueStatement = 243,
	BreakStatement = 244,
	ReturnStatement = 245,
	WithStatement = 246,
	SwitchStatement = 247,
	LabeledStatement = 248,
	ThrowStatement = 249,
	TryStatement = 250,
	DebuggerStatement = 251,
	VariableDeclaration = 252,
	VariableDeclarationList = 253,
	FunctionDeclaration = 254,
	ClassDeclaration = 255,
	InterfaceDeclaration = 256,
	TypeAliasDeclaration = 257,
	EnumDeclaration = 258,
	ModuleDeclaration = 259,
	ModuleBlock = 260,
	CaseBlock = 261,
	NamespaceExportDeclaration = 262,
	ImportEqualsDeclaration = 263,
	ImportDeclaration = 264,
	ImportClause = 265,
	NamespaceImport = 266,
	NamedImports = 267,
	ImportSpecifier = 268,
	ExportAssignment = 269,
	ExportDeclaration = 270,
	NamedExports = 271,
	NamespaceExport = 272,
	ExportSpecifier = 273,
	MissingDeclaration = 274,
	ExternalModuleReference = 275,
	JsxElement = 276,
	JsxSelfClosingElement = 277,
	JsxOpeningElement = 278,
	JsxClosingElement = 279,
	JsxFragment = 280,
	JsxOpeningFragment = 281,
	JsxClosingFragment = 282,
	JsxAttribute = 283,
	JsxAttributes = 284,
	JsxSpreadAttribute = 285,
	JsxExpression = 286,
	CaseClause = 287,
	DefaultClause = 288,
	HeritageClause = 289,
	CatchClause = 290,
	PropertyAssignment = 291,
	ShorthandPropertyAssignment = 292,
	SpreadAssignment = 293,
	EnumMember = 294,
	UnparsedPrologue = 295,
	UnparsedPrepend = 296,
	UnparsedText = 297,
	UnparsedInternalText = 298,
	UnparsedSyntheticReference = 299,
	SourceFile = 300,
	Bundle = 301,
	UnparsedSource = 302,
	InputFiles = 303,
	JSDocTypeExpression = 304,
	JSDocNameReference = 305,
	JSDocMemberName = 306,
	JSDocAllType = 307,
	JSDocUnknownType = 308,
	JSDocNullableType = 309,
	JSDocNonNullableType = 310,
	JSDocOptionalType = 311,
	JSDocFunctionType = 312,
	JSDocVariadicType = 313,
	JSDocNamepathType = 314,
	JSDocComment = 315,
	JSDocText = 316,
	JSDocTypeLiteral = 317,
	JSDocSignature = 318,
	JSDocLink = 319,
	JSDocLinkCode = 320,
	JSDocLinkPlain = 321,
	JSDocTag = 322,
	JSDocAugmentsTag = 323,
	JSDocImplementsTag = 324,
	JSDocAuthorTag = 325,
	JSDocDeprecatedTag = 326,
	JSDocClassTag = 327,
	JSDocPublicTag = 328,
	JSDocPrivateTag = 329,
	JSDocProtectedTag = 330,
	JSDocReadonlyTag = 331,
	JSDocOverrideTag = 332,
	JSDocCallbackTag = 333,
	JSDocEnumTag = 334,
	JSDocParameterTag = 335,
	JSDocReturnTag = 336,
	JSDocThisTag = 337,
	JSDocTypeTag = 338,
	JSDocTemplateTag = 339,
	JSDocTypedefTag = 340,
	JSDocSeeTag = 341,
	JSDocPropertyTag = 342,
	SyntaxList = 343,
	NotEmittedStatement = 344,
	PartiallyEmittedExpression = 345,
	CommaListExpression = 346,
	MergeDeclarationMarker = 347,
	EndOfDeclarationMarker = 348,
	SyntheticReferenceExpression = 349,
	Count = 350,
	FirstAssignment = 63,
	LastAssignment = 78,
	FirstCompoundAssignment = 64,
	LastCompoundAssignment = 78,
	FirstReservedWord = 81,
	LastReservedWord = 116,
	FirstKeyword = 81,
	LastKeyword = 158,
	FirstFutureReservedWord = 117,
	LastFutureReservedWord = 125,
	FirstTypeNode = 175,
	LastTypeNode = 198,
	FirstPunctuation = 18,
	LastPunctuation = 78,
	FirstToken = 0,
	LastToken = 158,
	FirstTriviaToken = 2,
	LastTriviaToken = 7,
	FirstLiteralToken = 8,
	LastLiteralToken = 14,
	FirstTemplateToken = 14,
	LastTemplateToken = 17,
	FirstBinaryOperator = 29,
	LastBinaryOperator = 78,
	FirstStatement = 235,
	LastStatement = 251,
	FirstNode = 159,
	FirstJSDocNode = 304,
	LastJSDocNode = 342,
	FirstJSDocTagNode = 322,
	LastJSDocTagNode = 342,
}

export enum NodeFlags
{
	None = 0,

	Let = 1 << 0,  // Variable declaration
	Const = 1 << 1,  // Variable declaration
	NestedNamespace = 1 << 2,  // Namespace declaration
	Synthesized = 1 << 3,  // Node was synthesized during transformation

	Namespace = 1 << 4,  // Namespace declaration
	OptionalChain = 1 << 5,  // Chained MemberExpression rooted to a pseudo-OptionalExpression
	ExportContext = 1 << 6,  // Export context (initialized by binding)
	ContainsThis = 1 << 7,  // Interface contains references to "this"

	HasImplicitReturn = 1 << 8,  // If function implicitly returns on one of codepaths (initialized by binding)
	HasExplicitReturn = 1 << 9,  // If function has explicit reachable return on one of codepaths (initialized by binding)
	GlobalAugmentation = 1 << 10,  // Set if module declaration is an augmentation for the global scope
	HasAsyncFunctions = 1 << 11, // If the file has async functions (initialized by binding)

	DisallowInContext = 1 << 12, // If node was parsed in a context where 'in-expressions' are not allowed
	YieldContext = 1 << 13, // If node was parsed in the 'yield' context created when parsing a generator
	DecoratorContext = 1 << 14, // If node was parsed as part of a decorator
	AwaitContext = 1 << 15, // If node was parsed in the 'await' context created when parsing an async function

	ThisNodeHasError = 1 << 16, // If the parser encountered an error when parsing the code that created this node
	JavaScriptFile = 1 << 17, // If node was parsed in a JavaScript
	ThisNodeOrAnySubNodesHasError = 1 << 18, // If this node or any of its children had an error
	HasAggregatedChildData = 1 << 19, // If we've computed data from children and cached it in this node

	/* @internal */ PossiblyContainsDynamicImport = 1 << 20,
	/* @internal */ PossiblyContainsImportMeta = 1 << 21,
	JSDoc = 1 << 22, // If node was parsed inside jsdoc
	/* @internal */ Ambient = 1 << 23, // If node was inside an ambient context -- a declaration file, or inside something with the `declare` modifier.

	/* @internal */ InWithStatement = 1 << 24, // If any ancestor of node was the `statement` of a WithStatement (not the `expression`)
	JsonFile = 1 << 25, // If node was parsed in a Json
	/* @internal */ TypeCached = 1 << 26, // If a type was cached for node at any point
	/* @internal */ Deprecated = 1 << 27, // If has '@deprecated' JSDoc tag

	BlockScoped = Let | Const,
	ReachabilityCheckFlags = HasImplicitReturn | HasExplicitReturn,
	ReachabilityAndEmitFlags = ReachabilityCheckFlags | HasAsyncFunctions,
	ContextFlags = DisallowInContext | YieldContext | DecoratorContext | AwaitContext | JavaScriptFile | InWithStatement | Ambient,
	TypeExcludesFlags = YieldContext | AwaitContext,
	/* @internal */ PermanentlySetIncrementalFlags = PossiblyContainsDynamicImport | PossiblyContainsImportMeta
}

export enum ModifierFlags
{
	None = 0,

	Export = 1 << 0,  // Declarations
	Ambient = 1 << 1,  // Declarations
	Public = 1 << 2,  // Property/Method
	Private = 1 << 3,  // Property/Method

	Protected = 1 << 4,  // Property/Method
	Static = 1 << 5,  // Property/Method
	Readonly = 1 << 6,  // Property/Method
	Abstract = 1 << 7,  // Class/Method/ConstructSignature

	Async = 1 << 8,  // Property/Method/Function
	Default = 1 << 9,  // Function/Class (export default declaration)
	Const = 1 << 11, // Const enum
	HasComputedJSDocModifiers = 1 << 12, // Indicates the computed modifier flags include modifiers from JSDoc.

	Deprecated = 1 << 13, // Deprecated tag.
	Override = 1 << 14, // Override method.

	HasComputedFlags = 1 << 29, // Modifier flags have been computed

	AccessibilityModifier = Public | Private | Protected,
	// Accessibility modifiers and 'readonly' can be attached to a parameter in a constructor to make it a property.
	ParameterPropertyModifier = AccessibilityModifier | Readonly | Override,
	NonPublicAccessibilityModifier = Private | Protected,
	TypeScriptModifier = Ambient | Public | Private | Protected | Readonly | Abstract | Const | Override,
	ExportDefault = Export | Default,
	All = Export | Ambient | Public | Private | Protected | Static | Readonly | Abstract | Async | Default | Const | Deprecated | Override
}
